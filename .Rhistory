sd = 30
?pt
t = pt(.95,10)
t
t = pt(1-.95,10)
t
n=9
t = pt(1-.95,8)
t
x_bar-t*30/3
x_bar+t*30/3
t = pt(.95,8)
x_bar-t*30/3
x_bar+t*30/3
N = 9
mean = 1100
sd = 30
error = qt(0.975, df = N-1) * sd / sqrt(N)
ans = mean + c(-1,1) * error
round(ans)
t = qt(.975,8)
x_bar-t*30/3
x_bar+t*30/3
t = qt(.975,8)
x_bar+t*30/3
x_bar+t/3
t = qt(.975,8)
x_bar+t/3
x_bar = -2
x_bar+t/3
t/3
2/(t/3)
N = 9
mean = -2
# error = qt(0.95,df = 9)*sd/sqrt(N-1) = 2
ans = 2 * sqrt(N) / qt(0.975, df = N-1)
round(ans, 2)
mean = 3-5
nx = 10
ny = 10
mx = 3
my = 5
Sx2 = 0.6
Sy2 = 0.68
Sr = sqrt(((nx-1)*Sx2+(ny-1)*Sy2)/(nx+ny-2))
ans = mx - my + c(-1,1) * qt(0.975, df = nx + ny - 2) * Sr * sqrt(1/nx+1/ny)
round(ans, 2)
qt(.978,8)
qt(.95,8)
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qt(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
ans
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qnorm(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qnorm(0.9) * Sr * sqrt(1/nD+1/nP)
ans
nD = 9
nP = 9
mD = -3
mP = 1
sD = 1.5
sP = 1.8
Sr = sqrt(((nD-1)*sD^2+(nP-1)*sP^2)/(nD+nD-2))
ans = mD - mP + c(-1,1) * qt(0.9, df = nD + nP - 2) * Sr * sqrt(1/nD+1/nP)
ans
n_x <- 9
n_y <- 9
x_bar <- -3
y_bar <- 1
s_x <- 1.5
s_y <- 1.8
alpha <- 0.1
sp_2 <- ((n_x - 1)*s_x^2 + (n_y - 1)*s_y^2) / (n_x + n_y - 2)
sp <- sqrt(sp_2)
ts <- qt(1 - (alpha/2), n_x + n_y - 2)
round((x_bar - y_bar) + c(-1, 1) * ts * sp * (sqrt(1/n_x + 1/n_y)), 3)
#q1
x_bar = 1100
sd = 30
n=9
t = qt(.975,8)
x_bar-t*30/3
x_bar+t*30/3
set.seed = 1989
sim <- rexp(10000,2)
sim
?seed
?set.seed
mean = matrix(10000)
View(mean)
mean = matrix(rep(0,10000))
sd = mean
for (i in 1:10000){
sim <- rexp(40,2)
mean[i] = mean(sim)
sd[i] = sd(sim)
}
mean
sd
hist(mean)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns
)
hist(mean)
plot(mean)
plot(mean,lty=2)
plot(mean,lty=3)
plot(mean,lty=10)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
set.seed = 1989
mean = matrix(rep(0,10000))
median = mean
sd = mean
for (i in 1:10000){
sim <- rexp(40,.2)
mean[i] = mean(sim)
median[i] = median(Sim)
sd[i] = sd(sim)
}
hist(mean)
plot(mean,lty=10)
mean = matrix(rep(0,10000))
median = mean
sd = mean
for (i in 1:10000){
sim <- rexp(40,.2)
mean[i] = mean(sim)
median[i] = median(sim)
sd[i] = sd(sim)
}
mean(mean)
median(median)
hist(mean)
mean(median)
median(mean)
data = matrix(rep(0,40))
data = matrix(ncol=40, nrow= 0)
for (i in 1:10000){
sim <- rexp(40,.2)
data <- rbind(data, sim)
mean[i] = mean(sim)
sd[i] = sd(sim)
}
mean(mean)
median(mean)
theorymean = 1/0.2
diff = theorymean - mean(mean)
theorymean - mean(mean)
theorymean - median(mean)
View(data)
var = var(as.vector(data))
var
unbiased_var = var*10000/9999
unbiased_var
theory_var = (1/0.2)^2
unbiased_var - theory_var
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = mean(median), col = "blue", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),c("red","blue"))
legend("topright",c("Mean","Median"),c("red","blue"),lwd=c(2,2))
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
?dnorm
set.seed = 1989
data = matrix(ncol=80, nrow= 0)
mean = matrix(rep(0,10000))
sd = mean
for (i in 1:10000){
sim <- rexp(80,.2)
data <- rbind(data, sim)
mean[i] = mean(sim)
sd[i] = sd(sim)
}
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
hist(mean)
abline(v = mean(mean), col = "red", lwd = 2)
abline(v = median(mean), col = "blue", lwd = 2)
legend("topright",c("Mean","Median"),col=c("red","blue"),lwd=c(2,2))
```
data(ToothGrowth)
data<-data(ToothGrowth)
dat
data
?data
data(ToothGrowth)
ToothGrowth
data=ToothGrowth
summary(data)
X<-c(140,138,150,148,135)
y<-c(132,135,151,146,130)
?t.test
t.test(x,y,mu=0,paired=T)
x<-c(140,138,150,148,135)
y<-c(132,135,151,146,130)
t.test(x,y,mu=0,paired=T)
t.test(x,y,mu=0,paired=T,var.equal = T)
t.test(x,y,mu=0,paired=T,var.equal = F)
a<-seq(1081:1119)
a<-seq(1081:1119)
a<-c(1081:1119)
a<-c(1081:1119)
b<-c(1077:1123)
c<-c(1031:1169)
d<-c(1080:1120)
mu=1100
sd=30
t.test(a,mu)
power.t.test(power = .9, delta = .01, sd = .04, type="one.sample", alt="one.sided")
power.t.test(n=100, delta = .01, sd = .04, type="one.sample", alt="one.sided")
power.t.test(power=.9, delta = .01, sd = .04, type="one.sample", alt="one.sided")
library(datasets)
data(mtcars)
str(data)
str(mtcars)
?mtcars
pairs(mtcars)
?boxplot
boxplot(mtcars$mpg~mtcars$am)
lm1<-lm(mtcars$mpg~mtcars$am)
summary(lm1)
confint(lm1, 'am', level=0.95)
confint(lm1, 'mpg', level=0.95)
?confint
confint(lm1, level=0.95)
full<-lm(mtcars$mpg~.)
summary(full)
full<-lm(mtcars$mpg~.,data=mtcars)
summary(full)
step(full, direction = "backward", trace=FALSE )
?step
step(full, direction = "backward", trace=T )
step(full, direction = "forward", trace=T )
full<-lm(mtcars$mpg~am,data=mtcars)
step(full, direction = "forward", trace=T )
step(full, direction = "both", trace=T )
full<-lm(mtcars$mpg~.,data=mtcars)
step(full, direction = "both", trace=T )
lm2<-lm(mtcars$mpg ~ wt + qsec + am,data=mtcars)
summary(lm2)
anova(lm1,lm2)
?anova
plot(lm2)
par(mfrow = c(2, 2))
plot(lm2)
par(mfrow = c(2, 2))
plot(lm2)
par(mfrow = c(2, 2))
plot(lm2)
full<-lm(mtcars$mpg~.,data=mtcars)
summary(lm2)
full<-lm(mtcars$mpg~.,data=mtcars)
lm2<-step(full, direction = "backward", trace=F )
summary(lm2)
library(MASS)
data(shuttle)
# convert outcome to 0 = noauto, 1 = auto
shuttle$use <- factor(shuttle$use, levels = c("auto", "noauto"), labels = c(1, 0))
fit1 <- glm(use ~ wind - 1, data = shuttle, family = "binomial")
summary(fit)
windhead <- fit1$coef[1]
windtail <- fit1$coef[2]
exp(windtail)/exp(windhead)
setwd("D:/Google/Coursera/8. Machine Learning")
dir()
?read.csv
train <- read.csv("./pml-testing.csv",header = T)
train<- read.csv("./pml-training.csv",header = T)
test <- read.csv("./pml-testing.csv",header = T)
head(train)
str(head)
str(train)
train$class
lm(classe~.,data=train)
install.packages("caret")
```{r, echo=FALSE}
traindata <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testdata<- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- read.csv(traindata,header = T)
test <- read.csv(traindata,header = T, na.strings=c("NA","#DIV/0!",""))
train<- read.csv(testdata,header = T, na.strings=c("NA","#DIV/0!",""))
?createDataPartition
?createDataPartition()
library(carat)
library(caret)
?createDataPartition
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
str(train$classe)
test = test1
test1 = test
test = train
train = test1
rm(test1)
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
myTraining <- training[inTrain, ]; myTesting <- training[-inTrain, ]
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
myTrain <- train[inTrain, ]; myTest <- train[-inTrain, ]
str(myTrain)
?NearZeroVariance
?NearZeroVariance
myTrainNZV <- nearZeroVar(myTrain, saveMetrics=TRUE)
?nearZeroVar
test <- test[,-1]
test
train<- train[,-1]
myTrainNZV <- names(myTraining) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTrainNZV <- names(myTrain) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTrain <- myTrain[!myTrainNZV]
dim(MyTrain)
dim(myTrain)
#Partition Training Data into 60% / 40%
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
myTrain <- train[inTrain, ]; myTest <- train[-inTrain, ]
#2. Check Variables with Near Zero Variance (NZV)
myTrainNZV <- nearZeroVar(myTrain, saveMetrics=TRUE)
myTtestNZV <- nearZeroVar(myTest, saveMetrics=TRUE)
#Remove variavbles with NZV
myTrainNZV <- names(myTrain) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTestNZV <- names(myTest) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTrain <- myTrain[!myTrainNZV]
myTest <- myTtest[!myTestNZV]
myTest <- myTest[!myTestNZV]
#Coerce into same type
for (i in 1:length(test) ) {
for(j in 1:length(myTrain)) {
if( length( grep(names(myTrain[i]), names(test)[j]) ) ==1)  {
class(test[j]) <- class(myTrain[i])
}
}
}
#And to make sure Coertion really worked, simple smart ass technique:
testing <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:
testing <- testing[-1,]
for (i in 1:length(myTest) ) {
for(j in 1:length(myTrain)) {
if( length( grep(names(myTrain[i]), names(test)[j]) ) ==1)  {
class(test[j]) <- class(myTrain[i])
}
}
}
testing <- rbind(myTraining[2, -58] , testing) #note row 2 does not mean anything, this will be removed right.. now:
testing <- testing[-1,]
testi <- rbind(myTrain[2, -58] , test) #note row 2 does not mean anything, this will be removed right.. now:
test <- test[-1,]
for (i in 1:length(test) ) {
for(j in 1:length(myTrain)) {
if( length( grep(names(myTrain[i]), names(test)[j]) ) ==1)  {
class(test[j]) <- class(myTrain[i])
}
}
}
length(test)
length(myTrain)
#Load data from URL
traindata <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testdata<- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
test <- read.csv(testdata,header = T, na.strings=c("NA","#DIV/0!",""))
train<- read.csv(traindata,header = T, na.strings=c("NA","#DIV/0!",""))
####################################
######Data Cleaning/Processing#######
####################################
#1. Remove ID column
test <- test[,-1]
train<- train[,-1]
#Partition Training Data into 60% / 40%
inTrain <- createDataPartition(y=train$classe, p=0.6, list=FALSE)
myTrain <- train[inTrain, ]; myTest <- train[-inTrain, ]
#2. Check Variables with Near Zero Variance (NZV)
myTrainNZV <- nearZeroVar(myTrain, saveMetrics=TRUE)
myTtestNZV <- nearZeroVar(myTest, saveMetrics=TRUE)
#Remove variavbles with NZV
myTrainNZV <- names(myTrain) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTestNZV <- names(myTest) %in% c("new_window", "kurtosis_roll_belt", "kurtosis_picth_belt",
"kurtosis_yaw_belt", "skewness_roll_belt", "skewness_roll_belt.1", "skewness_yaw_belt",
"max_yaw_belt", "min_yaw_belt", "amplitude_yaw_belt", "avg_roll_arm", "stddev_roll_arm",
"var_roll_arm", "avg_pitch_arm", "stddev_pitch_arm", "var_pitch_arm", "avg_yaw_arm",
"stddev_yaw_arm", "var_yaw_arm", "kurtosis_roll_arm", "kurtosis_picth_arm",
"kurtosis_yaw_arm", "skewness_roll_arm", "skewness_pitch_arm", "skewness_yaw_arm",
"max_roll_arm", "min_roll_arm", "min_pitch_arm", "amplitude_roll_arm", "amplitude_pitch_arm",
"kurtosis_roll_dumbbell", "kurtosis_picth_dumbbell", "kurtosis_yaw_dumbbell", "skewness_roll_dumbbell",
"skewness_pitch_dumbbell", "skewness_yaw_dumbbell", "max_yaw_dumbbell", "min_yaw_dumbbell",
"amplitude_yaw_dumbbell", "kurtosis_roll_forearm", "kurtosis_picth_forearm", "kurtosis_yaw_forearm",
"skewness_roll_forearm", "skewness_pitch_forearm", "skewness_yaw_forearm", "max_roll_forearm",
"max_yaw_forearm", "min_roll_forearm", "min_yaw_forearm", "amplitude_roll_forearm",
"amplitude_yaw_forearm", "avg_roll_forearm", "stddev_roll_forearm", "var_roll_forearm",
"avg_pitch_forearm", "stddev_pitch_forearm", "var_pitch_forearm", "avg_yaw_forearm",
"stddev_yaw_forearm", "var_yaw_forearm")
myTrain <- myTrain[!myTrainNZV]
myTest <- myTest[!myTestNZV]
#Test dataset
clean1 <- colnames(myTrain)
clean2 <- colnames(myTrain[, -58]) #already with classe column removed
myTest <- myTest[clean1]
test <- test[clean2]
testing <- test[clean2]
clean2
test
length(clean2)
length(test)
testing <- test[clean2]
